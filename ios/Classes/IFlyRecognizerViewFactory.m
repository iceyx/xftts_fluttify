//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "IFlyRecognizerViewFactory.h"
#import "XfttsFluttifyPlugin.h"
#import <objc/runtime.h>

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation IFlyRecognizerViewFactory {
}

- (instancetype)initWithRegistrar:(NSObject <FlutterPluginRegistrar> *)registrar {
  self = [super init];
  if (self) {
    _registrar = registrar;
  }

  return self;
}

- (NSObject <FlutterPlatformView> *)createWithFrame:(CGRect)frame viewIdentifier:(int64_t)viewId arguments:(id _Nullable)args {
  return [[IFlyRecognizerViewPlatformView alloc] initWithViewId:viewId frame: frame registrar:_registrar];
}

@end

@implementation IFlyRecognizerViewPlatformView {
  int64_t _viewId;
  CGRect _frame;
  NSDictionary<NSString *, Handler> *_handlerMap;
}

- (instancetype)initWithViewId:(int64_t)viewId frame:(CGRect)frame registrar:(NSObject <FlutterPluginRegistrar> *)registrar {
  self = [super init];
  if (self) {
    _viewId = viewId;
    _registrar = registrar;
    _frame = frame;
  }

  return self;
}

- (UIView *)view {
  IFlyRecognizerView *view = [[IFlyRecognizerView alloc] initWithFrame:_frame];
  // 这里用一个magic number调整一下id
  HEAP[@(2147483647 - _viewId)] = view;

  //region handlers
  _handlerMap = @{
      @"IFlyRecognizerView::initWithOrigin": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* originValue = (NSValue*) HEAP[@([args[@"origin"] integerValue])];
          CGPoint origin;
          [originValue getValue:&origin];
      
          // ref
          IFlyRecognizerView* ref = (IFlyRecognizerView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyRecognizerView@%@::initWithOrigin(%@)", args[@"refId"], args[@"origin"]);
          }
      
          // invoke native method
          id result = [ref initWithOrigin: origin];
      
          // result
          // return a ref
          HEAP[@(((NSObject*) result).hash)] = result;
          NSNumber* jsonableResult = @(((NSObject*) result).hash);
      
          methodResult(jsonableResult);
      },
      @"IFlyRecognizerView::initWithCenter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* centerValue = (NSValue*) HEAP[@([args[@"center"] integerValue])];
          CGPoint center;
          [centerValue getValue:&center];
      
          // ref
          IFlyRecognizerView* ref = (IFlyRecognizerView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyRecognizerView@%@::initWithCenter(%@)", args[@"refId"], args[@"center"]);
          }
      
          // invoke native method
          id result = [ref initWithCenter: center];
      
          // result
          // return a ref
          HEAP[@(((NSObject*) result).hash)] = result;
          NSNumber* jsonableResult = @(((NSObject*) result).hash);
      
          methodResult(jsonableResult);
      },
      @"IFlyRecognizerView::setAutoRotate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          BOOL autoRotate = [args[@"autoRotate"] boolValue];
      
          // ref
          IFlyRecognizerView* ref = (IFlyRecognizerView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyRecognizerView@%@::setAutoRotate(%@)", args[@"refId"], args[@"autoRotate"]);
          }
      
          // invoke native method
          [ref setAutoRotate : autoRotate];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"IFlyRecognizerView::setParameter_forKey": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* value = (NSString*) args[@"value"];
          // jsonable arg
          NSString* key = (NSString*) args[@"key"];
      
          // ref
          IFlyRecognizerView* ref = (IFlyRecognizerView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyRecognizerView@%@::setParameter(%@, %@)", args[@"refId"], args[@"value"], args[@"key"]);
          }
      
          // invoke native method
          BOOL result = [ref setParameter: value forKey: key];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"IFlyRecognizerView::parameterForKey": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* key = (NSString*) args[@"key"];
      
          // ref
          IFlyRecognizerView* ref = (IFlyRecognizerView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyRecognizerView@%@::parameterForKey(%@)", args[@"refId"], args[@"key"]);
          }
      
          // invoke native method
          NSString* result = [ref parameterForKey: key];
      
          // result
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      @"IFlyRecognizerView::start": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          IFlyRecognizerView* ref = (IFlyRecognizerView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyRecognizerView@%@::start()", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref start];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"IFlyRecognizerView::cancel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          IFlyRecognizerView* ref = (IFlyRecognizerView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyRecognizerView@%@::cancel()", args[@"refId"]);
          }
      
          // invoke native method
          [ref cancel ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"IFlyRecognizerView::set_delegate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"IFlyRecognizerView::set_delegate");
          }
      
          // args
      
      
          // ref
          IFlyRecognizerView* ref = (IFlyRecognizerView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.delegate = self;
          methodResult(@"success");
      },
      
  };
  //endregion

  //region method call handler
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"com.fluttify/xftts_fluttify/IFlyRecognizerView"
            binaryMessenger:[_registrar messenger]];

  __weak __typeof(self)weakSelf = self;
  [channel setMethodCallHandler:^(FlutterMethodCall *methodCall, FlutterResult methodResult) {
    NSDictionary<NSString *, id> *args = (NSDictionary<NSString *, id> *) [methodCall arguments];

    __strong __typeof(weakSelf)strongSelf = weakSelf;
    if (strongSelf->_handlerMap[methodCall.method] != nil) {
      strongSelf->_handlerMap[methodCall.method](strongSelf->_registrar, args, methodResult);
    } else {
      methodResult(FlutterMethodNotImplemented);
    }
  }];
  //endregion
  return view;
}

//region delegate
- (void)onCompleted : (IFlySpeechError*)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"IFlySpeechSynthesizerDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlySpeechSynthesizerDelegate::onCompleted");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argerror = @(error.hash);
  HEAP[argerror] = error;

  [channel invokeMethod:@"Callback::IFlySpeechSynthesizerDelegate::onCompleted" arguments:@{@"error": argerror}];
  
}

- (void)onSpeakBegin 
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"IFlySpeechSynthesizerDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlySpeechSynthesizerDelegate::onSpeakBegin");
  }

  // convert to jsonable arg
  

  [channel invokeMethod:@"Callback::IFlySpeechSynthesizerDelegate::onSpeakBegin" arguments:@{}];
  
}

- (void)onBufferProgress : (int)progress message: (NSString*)msg
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"IFlySpeechSynthesizerDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlySpeechSynthesizerDelegate::onBufferProgress_message");
  }

  // convert to jsonable arg
  // primitive callback arg
  NSNumber* argprogress = @(progress);
  // jsonable callback arg
  NSString* argmsg = msg;

  [channel invokeMethod:@"Callback::IFlySpeechSynthesizerDelegate::onBufferProgress_message" arguments:@{@"progress": argprogress, @"msg": argmsg}];
  
}

- (void)onSpeakProgress : (int)progress beginPos: (int)beginPos endPos: (int)endPos
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"IFlySpeechSynthesizerDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlySpeechSynthesizerDelegate::onSpeakProgress_beginPos_endPos");
  }

  // convert to jsonable arg
  // primitive callback arg
  NSNumber* argprogress = @(progress);
  // primitive callback arg
  NSNumber* argbeginPos = @(beginPos);
  // primitive callback arg
  NSNumber* argendPos = @(endPos);

  [channel invokeMethod:@"Callback::IFlySpeechSynthesizerDelegate::onSpeakProgress_beginPos_endPos" arguments:@{@"progress": argprogress, @"beginPos": argbeginPos, @"endPos": argendPos}];
  
}

- (void)onSpeakPaused 
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"IFlySpeechSynthesizerDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlySpeechSynthesizerDelegate::onSpeakPaused");
  }

  // convert to jsonable arg
  

  [channel invokeMethod:@"Callback::IFlySpeechSynthesizerDelegate::onSpeakPaused" arguments:@{}];
  
}

- (void)onSpeakResumed 
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"IFlySpeechSynthesizerDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlySpeechSynthesizerDelegate::onSpeakResumed");
  }

  // convert to jsonable arg
  

  [channel invokeMethod:@"Callback::IFlySpeechSynthesizerDelegate::onSpeakResumed" arguments:@{}];
  
}

- (void)onSpeakCancel 
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"IFlySpeechSynthesizerDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlySpeechSynthesizerDelegate::onSpeakCancel");
  }

  // convert to jsonable arg
  

  [channel invokeMethod:@"Callback::IFlySpeechSynthesizerDelegate::onSpeakCancel" arguments:@{}];
  
}

- (void)onEvent : (int)eventType arg0: (int)arg0 arg1: (int)arg1 data: (NSData*)eventData
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"IFlySpeechSynthesizerDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlySpeechSynthesizerDelegate::onEvent_arg0_arg1_data");
  }

  // convert to jsonable arg
  // primitive callback arg
  NSNumber* argeventType = @(eventType);
  // primitive callback arg
  NSNumber* argarg0 = @(arg0);
  // primitive callback arg
  NSNumber* argarg1 = @(arg1);
  // ref callback arg
  NSNumber* argeventData = @(eventData.hash);
  HEAP[argeventData] = eventData;

  [channel invokeMethod:@"Callback::IFlySpeechSynthesizerDelegate::onEvent_arg0_arg1_data" arguments:@{@"eventType": argeventType, @"arg0": argarg0, @"arg1": argarg1, @"eventData": argeventData}];
  
}

- (void)onResult : (NSArray*)resultArray isLast: (BOOL)isLast
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"IFlyRecognizerViewDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlyRecognizerViewDelegate::onResult_isLast");
  }

  // convert to jsonable arg
  // list callback arg
  NSMutableArray<NSNumber*>* argresultArray = [NSMutableArray arrayWithCapacity:resultArray.count];
  for (int __i__ = 0; __i__ < resultArray.count; __i__++) {
      NSObject* item = ((NSObject*) [resultArray objectAtIndex:__i__]);
      // return to dart side data
      argresultArray[__i__] = @(item.hash);
      // add to HEAP
      HEAP[@(item.hash)] = item;
  }
  // primitive callback arg
  NSNumber* argisLast = @(isLast);

  [channel invokeMethod:@"Callback::IFlyRecognizerViewDelegate::onResult_isLast" arguments:@{@"resultArray": argresultArray, @"isLast": argisLast}];
  
}

- (void)onIFlyRecorderBuffer : (const void*)buffer bufferSize: (int)size
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"IFlyPcmRecorderDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlyPcmRecorderDelegate::onIFlyRecorderBuffer_bufferSize");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argbuffer = @([NSValue valueWithPointer:buffer].hash);
  HEAP[argbuffer] = [NSValue valueWithPointer:buffer];
  // primitive callback arg
  NSNumber* argsize = @(size);

  [channel invokeMethod:@"Callback::IFlyPcmRecorderDelegate::onIFlyRecorderBuffer_bufferSize" arguments:@{@"buffer": argbuffer, @"size": argsize}];
  
}

- (void)onIFlyRecorderError : (IFlyPcmRecorder*)recoder theError: (int)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"IFlyPcmRecorderDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlyPcmRecorderDelegate::onIFlyRecorderError_theError");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argrecoder = @(recoder.hash);
  HEAP[argrecoder] = recoder;
  // primitive callback arg
  NSNumber* argerror = @(error);

  [channel invokeMethod:@"Callback::IFlyPcmRecorderDelegate::onIFlyRecorderError_theError" arguments:@{@"recoder": argrecoder, @"error": argerror}];
  
}

- (void)onIFlyRecorderVolumeChanged : (int)power
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"IFlyPcmRecorderDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlyPcmRecorderDelegate::onIFlyRecorderVolumeChanged");
  }

  // convert to jsonable arg
  // primitive callback arg
  NSNumber* argpower = @(power);

  [channel invokeMethod:@"Callback::IFlyPcmRecorderDelegate::onIFlyRecorderVolumeChanged" arguments:@{@"power": argpower}];
  
}

- (void)onResult : (NSDictionary*)dic
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"IFlyISVDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlyISVDelegate::onResult");
  }

  // convert to jsonable arg
  // jsonable callback arg
  NSDictionary* argdic = dic;

  [channel invokeMethod:@"Callback::IFlyISVDelegate::onResult" arguments:@{@"dic": argdic}];
  
}

- (void)onRecognition 
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"IFlyISVDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlyISVDelegate::onRecognition");
  }

  // convert to jsonable arg
  

  [channel invokeMethod:@"Callback::IFlyISVDelegate::onRecognition" arguments:@{}];
  
}

- (void)onVolumeChanged : (int)volume
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"IFlyISVDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlyISVDelegate::onVolumeChanged");
  }

  // convert to jsonable arg
  // primitive callback arg
  NSNumber* argvolume = @(volume);

  [channel invokeMethod:@"Callback::IFlyISVDelegate::onVolumeChanged" arguments:@{@"volume": argvolume}];
  
}

- (void)onBeginOfSpeech 
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"IFlyVoiceWakeuperDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlyVoiceWakeuperDelegate::onBeginOfSpeech");
  }

  // convert to jsonable arg
  

  [channel invokeMethod:@"Callback::IFlyVoiceWakeuperDelegate::onBeginOfSpeech" arguments:@{}];
  
}

- (void)onEndOfSpeech 
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"IFlyVoiceWakeuperDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlyVoiceWakeuperDelegate::onEndOfSpeech");
  }

  // convert to jsonable arg
  

  [channel invokeMethod:@"Callback::IFlyVoiceWakeuperDelegate::onEndOfSpeech" arguments:@{}];
  
}

- (void)onEvent : (int)eventType isLast: (BOOL)isLast arg1: (int)arg1 data: (NSMutableDictionary*)eventData
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"IFlyVoiceWakeuperDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlyVoiceWakeuperDelegate::onEvent_isLast_arg1_data");
  }

  // convert to jsonable arg
  // primitive callback arg
  NSNumber* argeventType = @(eventType);
  // primitive callback arg
  NSNumber* argisLast = @(isLast);
  // primitive callback arg
  NSNumber* argarg1 = @(arg1);
  // jsonable callback arg
  NSMutableDictionary* argeventData = eventData;

  [channel invokeMethod:@"Callback::IFlyVoiceWakeuperDelegate::onEvent_isLast_arg1_data" arguments:@{@"eventType": argeventType, @"isLast": argisLast, @"arg1": argarg1, @"eventData": argeventData}];
  
}

//endregion

@end
