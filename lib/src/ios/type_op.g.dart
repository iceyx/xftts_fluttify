// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:io';

import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'package:xftts_fluttify/src/android/android.export.g.dart';
import 'package:xftts_fluttify/src/ios/ios.export.g.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import
extension TypeOpXfttsFluttifyIOS on Ref {
  Future<bool> isIFlySpeechRecognizer() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::isKindOfIFlySpeechRecognizer', {'refId': refId});
    return result;
  }
  
  Future<bool> isIFlySetting() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::isKindOfIFlySetting', {'refId': refId});
    return result;
  }
  
  Future<bool> isIFlyRecognizerView() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::isKindOfIFlyRecognizerView', {'refId': refId});
    return result;
  }
  
  Future<bool> isIFlyVoiceWakeuper() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::isKindOfIFlyVoiceWakeuper', {'refId': refId});
    return result;
  }
  
  Future<bool> isIFlySpeechConstant() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::isKindOfIFlySpeechConstant', {'refId': refId});
    return result;
  }
  
  Future<bool> isIFlyDebugLog() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::isKindOfIFlyDebugLog', {'refId': refId});
    return result;
  }
  
  Future<bool> isIFlyDataUploader() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::isKindOfIFlyDataUploader', {'refId': refId});
    return result;
  }
  
  Future<bool> isIFlyAudioSession() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::isKindOfIFlyAudioSession', {'refId': refId});
    return result;
  }
  
  Future<bool> isIFlyUserWords() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::isKindOfIFlyUserWords', {'refId': refId});
    return result;
  }
  
  Future<bool> isIFlySpeechError() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::isKindOfIFlySpeechError', {'refId': refId});
    return result;
  }
  
  Future<bool> isIFlyResourceUtil() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::isKindOfIFlyResourceUtil', {'refId': refId});
    return result;
  }
  
  Future<bool> isIFlySpeechUtility() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::isKindOfIFlySpeechUtility', {'refId': refId});
    return result;
  }
  
  Future<bool> isIFlySpeechEvaluator() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::isKindOfIFlySpeechEvaluator', {'refId': refId});
    return result;
  }
  
  Future<bool> isIFlyISVRecognizer() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::isKindOfIFlyISVRecognizer', {'refId': refId});
    return result;
  }
  
  Future<bool> isIFlySpeechSynthesizer() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::isKindOfIFlySpeechSynthesizer', {'refId': refId});
    return result;
  }
  

  Future<IFlySpeechRecognizer> asIFlySpeechRecognizer() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::asIFlySpeechRecognizer', {'refId': refId});
    return IFlySpeechRecognizer()..refId = result;
  }
  
  Future<IFlySetting> asIFlySetting() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::asIFlySetting', {'refId': refId});
    return IFlySetting()..refId = result;
  }
  
  Future<IFlyRecognizerView> asIFlyRecognizerView() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::asIFlyRecognizerView', {'refId': refId});
    return IFlyRecognizerView()..refId = result;
  }
  
  Future<IFlyVoiceWakeuper> asIFlyVoiceWakeuper() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::asIFlyVoiceWakeuper', {'refId': refId});
    return IFlyVoiceWakeuper()..refId = result;
  }
  
  Future<IFlySpeechConstant> asIFlySpeechConstant() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::asIFlySpeechConstant', {'refId': refId});
    return IFlySpeechConstant()..refId = result;
  }
  
  Future<IFlyDebugLog> asIFlyDebugLog() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::asIFlyDebugLog', {'refId': refId});
    return IFlyDebugLog()..refId = result;
  }
  
  Future<IFlyDataUploader> asIFlyDataUploader() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::asIFlyDataUploader', {'refId': refId});
    return IFlyDataUploader()..refId = result;
  }
  
  Future<IFlyAudioSession> asIFlyAudioSession() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::asIFlyAudioSession', {'refId': refId});
    return IFlyAudioSession()..refId = result;
  }
  
  Future<IFlyUserWords> asIFlyUserWords() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::asIFlyUserWords', {'refId': refId});
    return IFlyUserWords()..refId = result;
  }
  
  Future<IFlySpeechError> asIFlySpeechError() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::asIFlySpeechError', {'refId': refId});
    return IFlySpeechError()..refId = result;
  }
  
  Future<IFlyResourceUtil> asIFlyResourceUtil() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::asIFlyResourceUtil', {'refId': refId});
    return IFlyResourceUtil()..refId = result;
  }
  
  Future<IFlySpeechUtility> asIFlySpeechUtility() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::asIFlySpeechUtility', {'refId': refId});
    return IFlySpeechUtility()..refId = result;
  }
  
  Future<IFlySpeechEvaluator> asIFlySpeechEvaluator() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::asIFlySpeechEvaluator', {'refId': refId});
    return IFlySpeechEvaluator()..refId = result;
  }
  
  Future<IFlyISVRecognizer> asIFlyISVRecognizer() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::asIFlyISVRecognizer', {'refId': refId});
    return IFlyISVRecognizer()..refId = result;
  }
  
  Future<IFlySpeechSynthesizer> asIFlySpeechSynthesizer() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::asIFlySpeechSynthesizer', {'refId': refId});
    return IFlySpeechSynthesizer()..refId = result;
  }
  
}