// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:xftts_fluttify/src/ios/ios.export.g.dart';
import 'package:xftts_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class IFlySpeechError extends NSObject  {
  //region constants
  static const String name__ = 'IFlySpeechError';

  
  //endregion

  //region creators
  static Future<IFlySpeechError> create__() async {
    final int refId = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('ObjectFactory::createIFlySpeechError');
    final object = IFlySpeechError()..refId = refId..tag__ = 'xftts_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<IFlySpeechError>> create_batch__(int length) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('ObjectFactory::create_batchIFlySpeechError', {'length': length});
  
    final List<IFlySpeechError> typedResult = resultBatch.map((result) => IFlySpeechError()..refId = result..tag__ = 'xftts_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<int> get_errorCode() async {
    final __result__ = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod("IFlySpeechError::get_errorCode", {'refId': refId});
  
    return __result__;
  }
  
  Future<int> get_errorType() async {
    final __result__ = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod("IFlySpeechError::get_errorType", {'refId': refId});
  
    return __result__;
  }
  
  Future<String> get_errorDesc() async {
    final __result__ = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod("IFlySpeechError::get_errorDesc", {'refId': refId});
  
    return __result__;
  }
  
  //endregion

  //region setters
  Future<void> set_errorCode(int errorCode) async {
    await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlySpeechError::set_errorCode', {'refId': refId, "errorCode": errorCode});
  
  
  }
  
  Future<void> set_errorType(int errorType) async {
    await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlySpeechError::set_errorType', {'refId': refId, "errorType": errorType});
  
  
  }
  
  Future<void> set_errorDesc(String errorDesc) async {
    await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlySpeechError::set_errorDesc', {'refId': refId, "errorDesc": errorDesc});
  
  
  }
  
  //endregion

  //region methods
  
  static Future<IFlySpeechError> initWithError(int errorCode) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechError::initWithError([\'errorCode\':$errorCode])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlySpeechError::initWithError', {"errorCode": errorCode});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = IFlySpeechError()..refId = __result__..tag__ = 'xftts_fluttify';
      kNativeObjectPool.add(__return__);
      return __return__;
    }
  }
  
  
  Future<int> errorCode() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechError@$refId::errorCode([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlySpeechError::errorCode', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<String> errorDesc() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechError@$refId::errorDesc([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlySpeechError::errorDesc', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  //endregion
}

extension IFlySpeechError_Batch on List<IFlySpeechError> {
  //region getters
  Future<List<int>> get_errorCode_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod("IFlySpeechError::get_errorCode_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_errorType_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod("IFlySpeechError::get_errorType_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<String>> get_errorDesc_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod("IFlySpeechError::get_errorDesc_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  //endregion

  //region setters
  Future<void> set_errorCode_batch(List<int> errorCode) async {
    await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlySpeechError::set_errorCode_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "errorCode": errorCode[__i__]}]);
  
  
  }
  
  Future<void> set_errorType_batch(List<int> errorType) async {
    await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlySpeechError::set_errorType_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "errorType": errorType[__i__]}]);
  
  
  }
  
  Future<void> set_errorDesc_batch(List<String> errorDesc) async {
    await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlySpeechError::set_errorDesc_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "errorDesc": errorDesc[__i__]}]);
  
  
  }
  
  //endregion

  //region methods
  
  static Future<List<IFlySpeechError>> initWithError_batch(List<int> errorCode) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlySpeechError::initWithError_batch', [for (int __i__ = 0; __i__ < errorCode.length; __i__++) {"errorCode": errorCode[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => IFlySpeechError()..refId = __result__..tag__ = 'xftts_fluttify').toList();
      kNativeObjectPool.addAll(typedResult);
      return typedResult;
    }
  }
  
  
  Future<List<int>> errorCode_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlySpeechError::errorCode_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<String>> errorDesc_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlySpeechError::errorDesc_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  //endregion
}