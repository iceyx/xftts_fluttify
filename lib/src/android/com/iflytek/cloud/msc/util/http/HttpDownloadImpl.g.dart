// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:xftts_fluttify/src/ios/ios.export.g.dart';
import 'package:xftts_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class com_iflytek_cloud_msc_util_http_HttpDownloadImpl extends java_lang_Object with com_iflytek_cloud_msc_util_http_HttpTransListener {
  //region constants
  static const String name__ = 'com.iflytek.cloud.msc.util.http.HttpDownloadImpl';

  
  //endregion

  //region creators
  static Future<com_iflytek_cloud_msc_util_http_HttpDownloadImpl> create__() async {
    final int refId = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('ObjectFactory::createcom_iflytek_cloud_msc_util_http_HttpDownloadImpl__');
    final object = com_iflytek_cloud_msc_util_http_HttpDownloadImpl()..refId = refId..tag__ = 'xftts_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<com_iflytek_cloud_msc_util_http_HttpDownloadImpl> create__int__android_content_Context(int var1, android_content_Context var2) async {
    final int refId = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('ObjectFactory::createcom_iflytek_cloud_msc_util_http_HttpDownloadImpl__int__android_content_Context', {"var1": var1, "var2": var2.refId});
    final object = com_iflytek_cloud_msc_util_http_HttpDownloadImpl()..refId = refId..tag__ = 'xftts_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<com_iflytek_cloud_msc_util_http_HttpDownloadImpl> create__long__int__android_content_Context(int var1, int var3, android_content_Context var4) async {
    final int refId = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('ObjectFactory::createcom_iflytek_cloud_msc_util_http_HttpDownloadImpl__long__int__android_content_Context', {"var1": var1, "var3": var3, "var4": var4.refId});
    final object = com_iflytek_cloud_msc_util_http_HttpDownloadImpl()..refId = refId..tag__ = 'xftts_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<com_iflytek_cloud_msc_util_http_HttpDownloadImpl>> create_batch__(int length) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('ObjectFactory::create_batchcom_iflytek_cloud_msc_util_http_HttpDownloadImpl__', {'length': length});
  
    final List<com_iflytek_cloud_msc_util_http_HttpDownloadImpl> typedResult = resultBatch.map((result) => com_iflytek_cloud_msc_util_http_HttpDownloadImpl()..refId = result..tag__ = 'xftts_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  static Future<List<com_iflytek_cloud_msc_util_http_HttpDownloadImpl>> create_batch__int__android_content_Context(List<int> var1, List<android_content_Context> var2) async {
    if (var1.length != var2.length) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('ObjectFactory::create_batchcom_iflytek_cloud_msc_util_http_HttpDownloadImpl__int__android_content_Context', [for (int __i__ = 0; __i__ < var1.length; __i__++) {"var1": var1[__i__], "var2": var2[__i__].refId}]);
  
    final List<com_iflytek_cloud_msc_util_http_HttpDownloadImpl> typedResult = resultBatch.map((result) => com_iflytek_cloud_msc_util_http_HttpDownloadImpl()..refId = result..tag__ = 'xftts_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  static Future<List<com_iflytek_cloud_msc_util_http_HttpDownloadImpl>> create_batch__long__int__android_content_Context(List<int> var1, List<int> var3, List<android_content_Context> var4) async {
    if (var1.length != var3.length || var3.length != var4.length) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('ObjectFactory::create_batchcom_iflytek_cloud_msc_util_http_HttpDownloadImpl__long__int__android_content_Context', [for (int __i__ = 0; __i__ < var1.length; __i__++) {"var1": var1[__i__], "var3": var3[__i__], "var4": var4[__i__].refId}]);
  
    final List<com_iflytek_cloud_msc_util_http_HttpDownloadImpl> typedResult = resultBatch.map((result) => com_iflytek_cloud_msc_util_http_HttpDownloadImpl()..refId = result..tag__ = 'xftts_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<void> setHttpDownloadListener(com_iflytek_cloud_msc_util_http_HttpDownloadListener var1) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: com.iflytek.cloud.msc.util.http.HttpDownloadImpl@$refId::setHttpDownloadListener([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('com.iflytek.cloud.msc.util.http.HttpDownloadImpl::setHttpDownloadListener', {"refId": refId});
  
  
    // handle native call
    MethodChannel('com.iflytek.cloud.msc.util.http.HttpDownloadImpl::setHttpDownloadListener::Callback')
        .setMethodCallHandler((methodCall) async {
          final args = methodCall.arguments as Map;
          // final refId = args['callerRefId'] as int;
          // if (refId != this.refId) return;
  
          switch (methodCall.method) {
            case 'Callback::com.iflytek.cloud.msc.util.http.HttpDownloadListener::onStart':
              // print log
              if (fluttifyLogEnabled) {
                print('fluttify-dart-callback: onStart([\'var1\':${args['var1']}, \'var3\':${args['var3']}, \'var4\':${args['var4']}, \'var5\':${args['var5']}])');
              }
        
              // handle the native call
              var1?.onStart(args['var1'], args['var3'], args['var4'], args['var5'], (com_iflytek_cloud_msc_util_http_HttpDownloadImpl()..refId = (args['var6'])..tag__ = 'xftts_fluttify'));
              break;
            case 'Callback::com.iflytek.cloud.msc.util.http.HttpDownloadListener::onProgress':
              // print log
              if (fluttifyLogEnabled) {
                print('fluttify-dart-callback: onProgress([\'var1\':${args['var1']}, \'var3\':${args['var3']}])');
              }
        
              // handle the native call
              var1?.onProgress(args['var1'], args['var3'], (com_iflytek_cloud_msc_util_http_HttpDownloadImpl()..refId = (args['var4'])..tag__ = 'xftts_fluttify'));
              break;
            case 'Callback::com.iflytek.cloud.msc.util.http.HttpDownloadListener::onFinish':
              // print log
              if (fluttifyLogEnabled) {
                print('fluttify-dart-callback: onFinish([\'var1\':${args['var1']}])');
              }
        
              // handle the native call
              var1?.onFinish(args['var1'], (com_iflytek_cloud_msc_util_http_HttpDownloadImpl()..refId = (args['var2'])..tag__ = 'xftts_fluttify'));
              break;
            case 'Callback::com.iflytek.cloud.msc.util.http.HttpDownloadListener::onError':
              // print log
              if (fluttifyLogEnabled) {
                print('fluttify-dart-callback: onError([\'var1\':${args['var1']}])');
              }
        
              // handle the native call
              var1?.onError(args['var1'], (com_iflytek_cloud_msc_util_http_HttpDownloadImpl()..refId = (args['var2'])..tag__ = 'xftts_fluttify'));
              break;
            default:
              break;
          }
        });
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> start(String var1, String var2, String var3, bool var4, String var5) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: com.iflytek.cloud.msc.util.http.HttpDownloadImpl@$refId::start([\'var1\':$var1, \'var2\':$var2, \'var3\':$var3, \'var4\':$var4, \'var5\':$var5])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('com.iflytek.cloud.msc.util.http.HttpDownloadImpl::start', {"var1": var1, "var2": var2, "var3": var3, "var4": var4, "var5": var5, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> cancel() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: com.iflytek.cloud.msc.util.http.HttpDownloadImpl@$refId::cancel([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('com.iflytek.cloud.msc.util.http.HttpDownloadImpl::cancel', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<int> getId() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: com.iflytek.cloud.msc.util.http.HttpDownloadImpl@$refId::getId([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('com.iflytek.cloud.msc.util.http.HttpDownloadImpl::getId', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<int> getType() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: com.iflytek.cloud.msc.util.http.HttpDownloadImpl@$refId::getType([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('com.iflytek.cloud.msc.util.http.HttpDownloadImpl::getType', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  //endregion
}

extension com_iflytek_cloud_msc_util_http_HttpDownloadImpl_Batch on List<com_iflytek_cloud_msc_util_http_HttpDownloadImpl> {
  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<List<void>> start_batch(List<String> var1, List<String> var2, List<String> var3, List<bool> var4, List<String> var5) async {
    if (var1.length != var2.length || var2.length != var3.length || var3.length != var4.length || var4.length != var5.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('com.iflytek.cloud.msc.util.http.HttpDownloadImpl::start_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__], "var2": var2[__i__], "var3": var3[__i__], "var4": var4[__i__], "var5": var5[__i__], "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> cancel_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('com.iflytek.cloud.msc.util.http.HttpDownloadImpl::cancel_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<int>> getId_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('com.iflytek.cloud.msc.util.http.HttpDownloadImpl::getId_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<int>> getType_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('com.iflytek.cloud.msc.util.http.HttpDownloadImpl::getType_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  //endregion
}