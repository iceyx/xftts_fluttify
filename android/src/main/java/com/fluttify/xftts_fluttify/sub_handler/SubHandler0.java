//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

package com.fluttify.xftts_fluttify.sub_handler;

import android.os.Bundle;
import android.util.Log;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import androidx.annotation.NonNull;
import io.flutter.embedding.engine.plugins.FlutterPlugin;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MethodCall;
import io.flutter.plugin.common.MethodChannel;
import io.flutter.plugin.common.PluginRegistry.Registrar;
import io.flutter.plugin.platform.PlatformViewRegistry;

import com.fluttify.xftts_fluttify.XfttsFluttifyPlugin.Handler;

import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getEnableLog;
import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getHEAP;

@SuppressWarnings("ALL")
public class SubHandler0 {
    public static Map<String, Handler> getSubHandler(BinaryMessenger messenger) {
        return new HashMap<String, Handler>() {{
            // getter
            put("com.iflytek.speech.SpeakerVerifierAidl.PassWord::get_pwdt", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.speech.SpeakerVerifierAidl.PassWord ref = (com.iflytek.speech.SpeakerVerifierAidl.PassWord) getHEAP().get(refId);
            
                String result = ref.pwdt;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.speech.SpeakerVerifierAidl.PassWord::get_pwid", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.speech.SpeakerVerifierAidl.PassWord ref = (com.iflytek.speech.SpeakerVerifierAidl.PassWord) getHEAP().get(refId);
            
                String result = ref.pwid;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.speech.SpeakerVerifierAidl.PassWord::get_pwtext", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.speech.SpeakerVerifierAidl.PassWord ref = (com.iflytek.speech.SpeakerVerifierAidl.PassWord) getHEAP().get(refId);
            
                String result = ref.pwtext;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.speech.VerifierResult::get_sst", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.speech.VerifierResult ref = (com.iflytek.speech.VerifierResult) getHEAP().get(refId);
            
                String result = ref.sst;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.speech.VerifierResult::get_ret", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.speech.VerifierResult ref = (com.iflytek.speech.VerifierResult) getHEAP().get(refId);
            
                boolean result = ref.ret;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.speech.VerifierResult::get_dcs", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.speech.VerifierResult ref = (com.iflytek.speech.VerifierResult) getHEAP().get(refId);
            
                String result = ref.dcs;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.speech.VerifierResult::get_vid", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.speech.VerifierResult ref = (com.iflytek.speech.VerifierResult) getHEAP().get(refId);
            
                String result = ref.vid;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.speech.VerifierResult::get_suc", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.speech.VerifierResult ref = (com.iflytek.speech.VerifierResult) getHEAP().get(refId);
            
                int result = ref.suc;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.speech.VerifierResult::get_rgn", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.speech.VerifierResult ref = (com.iflytek.speech.VerifierResult) getHEAP().get(refId);
            
                int result = ref.rgn;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.speech.VerifierResult::get_trs", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.speech.VerifierResult ref = (com.iflytek.speech.VerifierResult) getHEAP().get(refId);
            
                String result = ref.trs;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.speech.VerifierResult::get_source", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.speech.VerifierResult ref = (com.iflytek.speech.VerifierResult) getHEAP().get(refId);
            
                String result = ref.source;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::get_buffer", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get(refId);
            
                byte[] result = ref.buffer;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::get_offset", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get(refId);
            
                int result = ref.offset;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::get_length", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get(refId);
            
                int result = ref.length;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::get_status", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get(refId);
            
                int result = ref.status;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::get_sub", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get(refId);
            
                int result = ref.sub;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::get_volume", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get(refId);
            
                int result = ref.volume;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::get_voice", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get(refId);
            
                boolean result = ref.voice;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::get_quality", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get(refId);
            
                int result = ref.quality;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::get_start", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get(refId);
            
                int result = ref.start;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::get_end", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get(refId);
            
                int result = ref.end;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::get_error", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get(refId);
            
                int result = ref.error;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::get_confidence", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get(refId);
            
                float result = ref.confidence;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.cloud.VerifierResult::get_sst", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.VerifierResult ref = (com.iflytek.cloud.VerifierResult) getHEAP().get(refId);
            
                String result = ref.sst;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.cloud.VerifierResult::get_ret", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.VerifierResult ref = (com.iflytek.cloud.VerifierResult) getHEAP().get(refId);
            
                int result = ref.ret;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.cloud.VerifierResult::get_dcs", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.VerifierResult ref = (com.iflytek.cloud.VerifierResult) getHEAP().get(refId);
            
                String result = ref.dcs;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.cloud.VerifierResult::get_score", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.VerifierResult ref = (com.iflytek.cloud.VerifierResult) getHEAP().get(refId);
            
                Double result = ref.score;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.cloud.VerifierResult::get_score_raw", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.VerifierResult ref = (com.iflytek.cloud.VerifierResult) getHEAP().get(refId);
            
                Double result = ref.score_raw;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.cloud.VerifierResult::get_vid", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.VerifierResult ref = (com.iflytek.cloud.VerifierResult) getHEAP().get(refId);
            
                String result = ref.vid;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.cloud.VerifierResult::get_suc", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.VerifierResult ref = (com.iflytek.cloud.VerifierResult) getHEAP().get(refId);
            
                int result = ref.suc;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.cloud.VerifierResult::get_rgn", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.VerifierResult ref = (com.iflytek.cloud.VerifierResult) getHEAP().get(refId);
            
                int result = ref.rgn;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.cloud.VerifierResult::get_trs", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.VerifierResult ref = (com.iflytek.cloud.VerifierResult) getHEAP().get(refId);
            
                String result = ref.trs;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.cloud.VerifierResult::get_err", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.VerifierResult ref = (com.iflytek.cloud.VerifierResult) getHEAP().get(refId);
            
                int result = ref.err;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.cloud.VerifierResult::get_source", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.VerifierResult ref = (com.iflytek.cloud.VerifierResult) getHEAP().get(refId);
            
                String result = ref.source;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.msc.VAD.VadData::get_startByte", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.VAD.VadData ref = (com.iflytek.msc.VAD.VadData) getHEAP().get(refId);
            
                int result = ref.startByte;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.msc.VAD.VadData::get_endByte", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.VAD.VadData ref = (com.iflytek.msc.VAD.VadData) getHEAP().get(refId);
            
                int result = ref.endByte;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.msc.VAD.VadData::get_status", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.VAD.VadData ref = (com.iflytek.msc.VAD.VadData) getHEAP().get(refId);
            
                int result = ref.status;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.msc.VAD.VadData::get_volumeLevel", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.VAD.VadData ref = (com.iflytek.msc.VAD.VadData) getHEAP().get(refId);
            
                int result = ref.volumeLevel;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.msc.VAD.VadData::get_waitPauseOrEnd", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.VAD.VadData ref = (com.iflytek.msc.VAD.VadData) getHEAP().get(refId);
            
                int result = ref.waitPauseOrEnd;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.msc.VAD.VadData::get_endRemainFrameNum", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.VAD.VadData ref = (com.iflytek.msc.VAD.VadData) getHEAP().get(refId);
            
                int result = ref.endRemainFrameNum;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.msc.VAD.VadData::get_waitStart", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.VAD.VadData ref = (com.iflytek.msc.VAD.VadData) getHEAP().get(refId);
            
                int result = ref.waitStart;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.msc.VAD.VadData::get_startRemainFrameNum", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.VAD.VadData ref = (com.iflytek.msc.VAD.VadData) getHEAP().get(refId);
            
                int result = ref.startRemainFrameNum;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.msc.VAD.VadData::get_wavData", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.VAD.VadData ref = (com.iflytek.msc.VAD.VadData) getHEAP().get(refId);
            
                byte[] result = ref.wavData;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.msc.VAD.VadData::get_wavDataSize", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.VAD.VadData ref = (com.iflytek.msc.VAD.VadData) getHEAP().get(refId);
            
                int result = ref.wavDataSize;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.msc.VAD.VadData::get_inSpeech", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.VAD.VadData ref = (com.iflytek.msc.VAD.VadData) getHEAP().get(refId);
            
                int result = ref.inSpeech;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.msc.VAD.VadData::get_audioQuality", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.VAD.VadData ref = (com.iflytek.msc.VAD.VadData) getHEAP().get(refId);
            
                int result = ref.audioQuality;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.msc.VAD.VadData::get_firstOutByte", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.VAD.VadData ref = (com.iflytek.msc.VAD.VadData) getHEAP().get(refId);
            
                int result = ref.firstOutByte;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.msc.MSCSessionInfo::get_errorcode", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.MSCSessionInfo ref = (com.iflytek.msc.MSCSessionInfo) getHEAP().get(refId);
            
                int result = ref.errorcode;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.msc.MSCSessionInfo::get_epstatues", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.MSCSessionInfo ref = (com.iflytek.msc.MSCSessionInfo) getHEAP().get(refId);
            
                int result = ref.epstatues;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.msc.MSCSessionInfo::get_rsltstatus", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.MSCSessionInfo ref = (com.iflytek.msc.MSCSessionInfo) getHEAP().get(refId);
            
                int result = ref.rsltstatus;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.msc.MSCSessionInfo::get_sesstatus", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.MSCSessionInfo ref = (com.iflytek.msc.MSCSessionInfo) getHEAP().get(refId);
            
                int result = ref.sesstatus;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.msc.MSCSessionInfo::get_buffer", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.MSCSessionInfo ref = (com.iflytek.msc.MSCSessionInfo) getHEAP().get(refId);
            
                byte[] result = ref.buffer;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.msc.MSCSessionInfo::get_buflen", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.MSCSessionInfo ref = (com.iflytek.msc.MSCSessionInfo) getHEAP().get(refId);
            
                int result = ref.buflen;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.msc.MetaVAD.Instance::get_handle", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.MetaVAD.Instance ref = (com.iflytek.msc.MetaVAD.Instance) getHEAP().get(refId);
            
                long result = ref.handle;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.msc.MetaVAD.Instance::get_rate", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.MetaVAD.Instance ref = (com.iflytek.msc.MetaVAD.Instance) getHEAP().get(refId);
            
                int result = ref.rate;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.msc.MetaVAD.Instance::get_begin", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.MetaVAD.Instance ref = (com.iflytek.msc.MetaVAD.Instance) getHEAP().get(refId);
            
                int result = ref.begin;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.msc.MetaVAD.Instance::get_end", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.MetaVAD.Instance ref = (com.iflytek.msc.MetaVAD.Instance) getHEAP().get(refId);
            
                int result = ref.end;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.msc.MetaVAD.Instance::get_seg", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.MetaVAD.Instance ref = (com.iflytek.msc.MetaVAD.Instance) getHEAP().get(refId);
            
                int result = ref.seg;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.msc.MetaVAD.Instance::get_volume", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.MetaVAD.Instance ref = (com.iflytek.msc.MetaVAD.Instance) getHEAP().get(refId);
            
                int result = ref.volume;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.iflytek.speech.SpeakerVerifierAidl.PassWord::get_pwdt_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.speech.SpeakerVerifierAidl.PassWord ref = (com.iflytek.speech.SpeakerVerifierAidl.PassWord) getHEAP().get((int) args.get("refId"));
            
                    String result = ref.pwdt;
            
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.speech.SpeakerVerifierAidl.PassWord::get_pwid_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.speech.SpeakerVerifierAidl.PassWord ref = (com.iflytek.speech.SpeakerVerifierAidl.PassWord) getHEAP().get((int) args.get("refId"));
            
                    String result = ref.pwid;
            
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.speech.SpeakerVerifierAidl.PassWord::get_pwtext_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.speech.SpeakerVerifierAidl.PassWord ref = (com.iflytek.speech.SpeakerVerifierAidl.PassWord) getHEAP().get((int) args.get("refId"));
            
                    String result = ref.pwtext;
            
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.speech.VerifierResult::get_sst_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.speech.VerifierResult ref = (com.iflytek.speech.VerifierResult) getHEAP().get((int) args.get("refId"));
            
                    String result = ref.sst;
            
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.speech.VerifierResult::get_ret_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.speech.VerifierResult ref = (com.iflytek.speech.VerifierResult) getHEAP().get((int) args.get("refId"));
            
                    boolean result = ref.ret;
            
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.speech.VerifierResult::get_dcs_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.speech.VerifierResult ref = (com.iflytek.speech.VerifierResult) getHEAP().get((int) args.get("refId"));
            
                    String result = ref.dcs;
            
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.speech.VerifierResult::get_vid_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.speech.VerifierResult ref = (com.iflytek.speech.VerifierResult) getHEAP().get((int) args.get("refId"));
            
                    String result = ref.vid;
            
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.speech.VerifierResult::get_suc_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.speech.VerifierResult ref = (com.iflytek.speech.VerifierResult) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.suc;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.speech.VerifierResult::get_rgn_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.speech.VerifierResult ref = (com.iflytek.speech.VerifierResult) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.rgn;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.speech.VerifierResult::get_trs_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.speech.VerifierResult ref = (com.iflytek.speech.VerifierResult) getHEAP().get((int) args.get("refId"));
            
                    String result = ref.trs;
            
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.speech.VerifierResult::get_source_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.speech.VerifierResult ref = (com.iflytek.speech.VerifierResult) getHEAP().get((int) args.get("refId"));
            
                    String result = ref.source;
            
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::get_buffer_batch", (argsBatch, methodResult) -> {
                List<byte[]> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get((int) args.get("refId"));
            
                    byte[] result = ref.buffer;
            
                    byte[] jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::get_offset_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.offset;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::get_length_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.length;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::get_status_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.status;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::get_sub_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.sub;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::get_volume_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.volume;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::get_voice_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get((int) args.get("refId"));
            
                    boolean result = ref.voice;
            
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::get_quality_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.quality;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::get_start_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.start;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::get_end_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.end;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::get_error_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.error;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::get_confidence_batch", (argsBatch, methodResult) -> {
                List<Float> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get((int) args.get("refId"));
            
                    float result = ref.confidence;
            
                    float jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.cloud.VerifierResult::get_sst_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.cloud.VerifierResult ref = (com.iflytek.cloud.VerifierResult) getHEAP().get((int) args.get("refId"));
            
                    String result = ref.sst;
            
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.cloud.VerifierResult::get_ret_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.cloud.VerifierResult ref = (com.iflytek.cloud.VerifierResult) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.ret;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.cloud.VerifierResult::get_dcs_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.cloud.VerifierResult ref = (com.iflytek.cloud.VerifierResult) getHEAP().get((int) args.get("refId"));
            
                    String result = ref.dcs;
            
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.cloud.VerifierResult::get_score_batch", (argsBatch, methodResult) -> {
                List<Double> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.cloud.VerifierResult ref = (com.iflytek.cloud.VerifierResult) getHEAP().get((int) args.get("refId"));
            
                    Double result = ref.score;
            
                    Double jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.cloud.VerifierResult::get_score_raw_batch", (argsBatch, methodResult) -> {
                List<Double> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.cloud.VerifierResult ref = (com.iflytek.cloud.VerifierResult) getHEAP().get((int) args.get("refId"));
            
                    Double result = ref.score_raw;
            
                    Double jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.cloud.VerifierResult::get_vid_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.cloud.VerifierResult ref = (com.iflytek.cloud.VerifierResult) getHEAP().get((int) args.get("refId"));
            
                    String result = ref.vid;
            
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.cloud.VerifierResult::get_suc_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.cloud.VerifierResult ref = (com.iflytek.cloud.VerifierResult) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.suc;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.cloud.VerifierResult::get_rgn_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.cloud.VerifierResult ref = (com.iflytek.cloud.VerifierResult) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.rgn;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.cloud.VerifierResult::get_trs_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.cloud.VerifierResult ref = (com.iflytek.cloud.VerifierResult) getHEAP().get((int) args.get("refId"));
            
                    String result = ref.trs;
            
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.cloud.VerifierResult::get_err_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.cloud.VerifierResult ref = (com.iflytek.cloud.VerifierResult) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.err;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.cloud.VerifierResult::get_source_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.cloud.VerifierResult ref = (com.iflytek.cloud.VerifierResult) getHEAP().get((int) args.get("refId"));
            
                    String result = ref.source;
            
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.msc.VAD.VadData::get_startByte_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.msc.VAD.VadData ref = (com.iflytek.msc.VAD.VadData) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.startByte;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.msc.VAD.VadData::get_endByte_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.msc.VAD.VadData ref = (com.iflytek.msc.VAD.VadData) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.endByte;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.msc.VAD.VadData::get_status_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.msc.VAD.VadData ref = (com.iflytek.msc.VAD.VadData) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.status;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.msc.VAD.VadData::get_volumeLevel_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.msc.VAD.VadData ref = (com.iflytek.msc.VAD.VadData) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.volumeLevel;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.msc.VAD.VadData::get_waitPauseOrEnd_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.msc.VAD.VadData ref = (com.iflytek.msc.VAD.VadData) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.waitPauseOrEnd;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.msc.VAD.VadData::get_endRemainFrameNum_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.msc.VAD.VadData ref = (com.iflytek.msc.VAD.VadData) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.endRemainFrameNum;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.msc.VAD.VadData::get_waitStart_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.msc.VAD.VadData ref = (com.iflytek.msc.VAD.VadData) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.waitStart;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.msc.VAD.VadData::get_startRemainFrameNum_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.msc.VAD.VadData ref = (com.iflytek.msc.VAD.VadData) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.startRemainFrameNum;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.msc.VAD.VadData::get_wavData_batch", (argsBatch, methodResult) -> {
                List<byte[]> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.msc.VAD.VadData ref = (com.iflytek.msc.VAD.VadData) getHEAP().get((int) args.get("refId"));
            
                    byte[] result = ref.wavData;
            
                    byte[] jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.msc.VAD.VadData::get_wavDataSize_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.msc.VAD.VadData ref = (com.iflytek.msc.VAD.VadData) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.wavDataSize;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.msc.VAD.VadData::get_inSpeech_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.msc.VAD.VadData ref = (com.iflytek.msc.VAD.VadData) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.inSpeech;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.msc.VAD.VadData::get_audioQuality_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.msc.VAD.VadData ref = (com.iflytek.msc.VAD.VadData) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.audioQuality;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.msc.VAD.VadData::get_firstOutByte_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.msc.VAD.VadData ref = (com.iflytek.msc.VAD.VadData) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.firstOutByte;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.msc.MSCSessionInfo::get_errorcode_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.msc.MSCSessionInfo ref = (com.iflytek.msc.MSCSessionInfo) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.errorcode;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.msc.MSCSessionInfo::get_epstatues_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.msc.MSCSessionInfo ref = (com.iflytek.msc.MSCSessionInfo) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.epstatues;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.msc.MSCSessionInfo::get_rsltstatus_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.msc.MSCSessionInfo ref = (com.iflytek.msc.MSCSessionInfo) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.rsltstatus;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.msc.MSCSessionInfo::get_sesstatus_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.msc.MSCSessionInfo ref = (com.iflytek.msc.MSCSessionInfo) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.sesstatus;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.msc.MSCSessionInfo::get_buffer_batch", (argsBatch, methodResult) -> {
                List<byte[]> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.msc.MSCSessionInfo ref = (com.iflytek.msc.MSCSessionInfo) getHEAP().get((int) args.get("refId"));
            
                    byte[] result = ref.buffer;
            
                    byte[] jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.msc.MSCSessionInfo::get_buflen_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.msc.MSCSessionInfo ref = (com.iflytek.msc.MSCSessionInfo) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.buflen;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.msc.MetaVAD.Instance::get_handle_batch", (argsBatch, methodResult) -> {
                List<Long> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.msc.MetaVAD.Instance ref = (com.iflytek.msc.MetaVAD.Instance) getHEAP().get((int) args.get("refId"));
            
                    long result = ref.handle;
            
                    long jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.msc.MetaVAD.Instance::get_rate_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.msc.MetaVAD.Instance ref = (com.iflytek.msc.MetaVAD.Instance) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.rate;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.msc.MetaVAD.Instance::get_begin_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.msc.MetaVAD.Instance ref = (com.iflytek.msc.MetaVAD.Instance) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.begin;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.msc.MetaVAD.Instance::get_end_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.msc.MetaVAD.Instance ref = (com.iflytek.msc.MetaVAD.Instance) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.end;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.msc.MetaVAD.Instance::get_seg_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.msc.MetaVAD.Instance ref = (com.iflytek.msc.MetaVAD.Instance) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.seg;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.iflytek.msc.MetaVAD.Instance::get_volume_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // ref object
                    com.iflytek.msc.MetaVAD.Instance ref = (com.iflytek.msc.MetaVAD.Instance) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.volume;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // setter
            put("com.iflytek.speech.SpeakerVerifierAidl.PassWord::set_pwdt", (args, methodResult) -> {
                // jsonable arg
                String pwdt = (String) ((Map<String, Object>) args).get("pwdt");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.speech.SpeakerVerifierAidl.PassWord ref = (com.iflytek.speech.SpeakerVerifierAidl.PassWord) getHEAP().get(refId);
            
                ref.pwdt = pwdt;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.speech.SpeakerVerifierAidl.PassWord::set_pwid", (args, methodResult) -> {
                // jsonable arg
                String pwid = (String) ((Map<String, Object>) args).get("pwid");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.speech.SpeakerVerifierAidl.PassWord ref = (com.iflytek.speech.SpeakerVerifierAidl.PassWord) getHEAP().get(refId);
            
                ref.pwid = pwid;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.speech.SpeakerVerifierAidl.PassWord::set_pwtext", (args, methodResult) -> {
                // jsonable arg
                String pwtext = (String) ((Map<String, Object>) args).get("pwtext");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.speech.SpeakerVerifierAidl.PassWord ref = (com.iflytek.speech.SpeakerVerifierAidl.PassWord) getHEAP().get(refId);
            
                ref.pwtext = pwtext;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.speech.VerifierResult::set_sst", (args, methodResult) -> {
                // jsonable arg
                String sst = (String) ((Map<String, Object>) args).get("sst");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.speech.VerifierResult ref = (com.iflytek.speech.VerifierResult) getHEAP().get(refId);
            
                ref.sst = sst;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.speech.VerifierResult::set_ret", (args, methodResult) -> {
                // jsonable arg
                boolean ret = (boolean) ((Map<String, Object>) args).get("ret");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.speech.VerifierResult ref = (com.iflytek.speech.VerifierResult) getHEAP().get(refId);
            
                ref.ret = ret;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.speech.VerifierResult::set_dcs", (args, methodResult) -> {
                // jsonable arg
                String dcs = (String) ((Map<String, Object>) args).get("dcs");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.speech.VerifierResult ref = (com.iflytek.speech.VerifierResult) getHEAP().get(refId);
            
                ref.dcs = dcs;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.speech.VerifierResult::set_vid", (args, methodResult) -> {
                // jsonable arg
                String vid = (String) ((Map<String, Object>) args).get("vid");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.speech.VerifierResult ref = (com.iflytek.speech.VerifierResult) getHEAP().get(refId);
            
                ref.vid = vid;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.speech.VerifierResult::set_suc", (args, methodResult) -> {
                // jsonable arg
                int suc = (int) ((Map<String, Object>) args).get("suc");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.speech.VerifierResult ref = (com.iflytek.speech.VerifierResult) getHEAP().get(refId);
            
                ref.suc = suc;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.speech.VerifierResult::set_rgn", (args, methodResult) -> {
                // jsonable arg
                int rgn = (int) ((Map<String, Object>) args).get("rgn");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.speech.VerifierResult ref = (com.iflytek.speech.VerifierResult) getHEAP().get(refId);
            
                ref.rgn = rgn;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.speech.VerifierResult::set_trs", (args, methodResult) -> {
                // jsonable arg
                String trs = (String) ((Map<String, Object>) args).get("trs");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.speech.VerifierResult ref = (com.iflytek.speech.VerifierResult) getHEAP().get(refId);
            
                ref.trs = trs;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.speech.VerifierResult::set_source", (args, methodResult) -> {
                // jsonable arg
                String source = (String) ((Map<String, Object>) args).get("source");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.speech.VerifierResult ref = (com.iflytek.speech.VerifierResult) getHEAP().get(refId);
            
                ref.source = source;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::set_buffer", (args, methodResult) -> {
                // jsonable arg
                byte[] buffer = (byte[]) ((Map<String, Object>) args).get("buffer");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get(refId);
            
                ref.buffer = buffer;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::set_offset", (args, methodResult) -> {
                // jsonable arg
                int offset = (int) ((Map<String, Object>) args).get("offset");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get(refId);
            
                ref.offset = offset;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::set_length", (args, methodResult) -> {
                // jsonable arg
                int length = (int) ((Map<String, Object>) args).get("length");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get(refId);
            
                ref.length = length;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::set_status", (args, methodResult) -> {
                // jsonable arg
                int status = (int) ((Map<String, Object>) args).get("status");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get(refId);
            
                ref.status = status;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::set_sub", (args, methodResult) -> {
                // jsonable arg
                int sub = (int) ((Map<String, Object>) args).get("sub");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get(refId);
            
                ref.sub = sub;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::set_volume", (args, methodResult) -> {
                // jsonable arg
                int volume = (int) ((Map<String, Object>) args).get("volume");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get(refId);
            
                ref.volume = volume;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::set_voice", (args, methodResult) -> {
                // jsonable arg
                boolean voice = (boolean) ((Map<String, Object>) args).get("voice");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get(refId);
            
                ref.voice = voice;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::set_quality", (args, methodResult) -> {
                // jsonable arg
                int quality = (int) ((Map<String, Object>) args).get("quality");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get(refId);
            
                ref.quality = quality;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::set_start", (args, methodResult) -> {
                // jsonable arg
                int start = (int) ((Map<String, Object>) args).get("start");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get(refId);
            
                ref.start = start;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::set_end", (args, methodResult) -> {
                // jsonable arg
                int end = (int) ((Map<String, Object>) args).get("end");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get(refId);
            
                ref.end = end;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::set_error", (args, methodResult) -> {
                // jsonable arg
                int error = (int) ((Map<String, Object>) args).get("error");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get(refId);
            
                ref.error = error;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::set_confidence", (args, methodResult) -> {
                // jsonable arg
                Double confidence = (Double) ((Map<String, Object>) args).get("confidence");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get(refId);
            
                ref.confidence = new Double(confidence).floatValue();
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.cloud.VerifierResult::set_sst", (args, methodResult) -> {
                // jsonable arg
                String sst = (String) ((Map<String, Object>) args).get("sst");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.VerifierResult ref = (com.iflytek.cloud.VerifierResult) getHEAP().get(refId);
            
                ref.sst = sst;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.cloud.VerifierResult::set_ret", (args, methodResult) -> {
                // jsonable arg
                int ret = (int) ((Map<String, Object>) args).get("ret");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.VerifierResult ref = (com.iflytek.cloud.VerifierResult) getHEAP().get(refId);
            
                ref.ret = ret;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.cloud.VerifierResult::set_dcs", (args, methodResult) -> {
                // jsonable arg
                String dcs = (String) ((Map<String, Object>) args).get("dcs");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.VerifierResult ref = (com.iflytek.cloud.VerifierResult) getHEAP().get(refId);
            
                ref.dcs = dcs;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.cloud.VerifierResult::set_score", (args, methodResult) -> {
                // jsonable arg
                Double score = (Double) ((Map<String, Object>) args).get("score");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.VerifierResult ref = (com.iflytek.cloud.VerifierResult) getHEAP().get(refId);
            
                ref.score = score;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.cloud.VerifierResult::set_score_raw", (args, methodResult) -> {
                // jsonable arg
                Double score_raw = (Double) ((Map<String, Object>) args).get("score_raw");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.VerifierResult ref = (com.iflytek.cloud.VerifierResult) getHEAP().get(refId);
            
                ref.score_raw = score_raw;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.cloud.VerifierResult::set_vid", (args, methodResult) -> {
                // jsonable arg
                String vid = (String) ((Map<String, Object>) args).get("vid");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.VerifierResult ref = (com.iflytek.cloud.VerifierResult) getHEAP().get(refId);
            
                ref.vid = vid;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.cloud.VerifierResult::set_suc", (args, methodResult) -> {
                // jsonable arg
                int suc = (int) ((Map<String, Object>) args).get("suc");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.VerifierResult ref = (com.iflytek.cloud.VerifierResult) getHEAP().get(refId);
            
                ref.suc = suc;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.cloud.VerifierResult::set_rgn", (args, methodResult) -> {
                // jsonable arg
                int rgn = (int) ((Map<String, Object>) args).get("rgn");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.VerifierResult ref = (com.iflytek.cloud.VerifierResult) getHEAP().get(refId);
            
                ref.rgn = rgn;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.cloud.VerifierResult::set_trs", (args, methodResult) -> {
                // jsonable arg
                String trs = (String) ((Map<String, Object>) args).get("trs");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.VerifierResult ref = (com.iflytek.cloud.VerifierResult) getHEAP().get(refId);
            
                ref.trs = trs;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.cloud.VerifierResult::set_err", (args, methodResult) -> {
                // jsonable arg
                int err = (int) ((Map<String, Object>) args).get("err");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.VerifierResult ref = (com.iflytek.cloud.VerifierResult) getHEAP().get(refId);
            
                ref.err = err;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.cloud.VerifierResult::set_source", (args, methodResult) -> {
                // jsonable arg
                String source = (String) ((Map<String, Object>) args).get("source");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.cloud.VerifierResult ref = (com.iflytek.cloud.VerifierResult) getHEAP().get(refId);
            
                ref.source = source;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.msc.VAD.VadData::set_startByte", (args, methodResult) -> {
                // jsonable arg
                int startByte = (int) ((Map<String, Object>) args).get("startByte");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.VAD.VadData ref = (com.iflytek.msc.VAD.VadData) getHEAP().get(refId);
            
                ref.startByte = startByte;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.msc.VAD.VadData::set_endByte", (args, methodResult) -> {
                // jsonable arg
                int endByte = (int) ((Map<String, Object>) args).get("endByte");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.VAD.VadData ref = (com.iflytek.msc.VAD.VadData) getHEAP().get(refId);
            
                ref.endByte = endByte;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.msc.VAD.VadData::set_status", (args, methodResult) -> {
                // jsonable arg
                int status = (int) ((Map<String, Object>) args).get("status");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.VAD.VadData ref = (com.iflytek.msc.VAD.VadData) getHEAP().get(refId);
            
                ref.status = status;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.msc.VAD.VadData::set_volumeLevel", (args, methodResult) -> {
                // jsonable arg
                int volumeLevel = (int) ((Map<String, Object>) args).get("volumeLevel");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.VAD.VadData ref = (com.iflytek.msc.VAD.VadData) getHEAP().get(refId);
            
                ref.volumeLevel = volumeLevel;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.msc.VAD.VadData::set_waitPauseOrEnd", (args, methodResult) -> {
                // jsonable arg
                int waitPauseOrEnd = (int) ((Map<String, Object>) args).get("waitPauseOrEnd");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.VAD.VadData ref = (com.iflytek.msc.VAD.VadData) getHEAP().get(refId);
            
                ref.waitPauseOrEnd = waitPauseOrEnd;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.msc.VAD.VadData::set_endRemainFrameNum", (args, methodResult) -> {
                // jsonable arg
                int endRemainFrameNum = (int) ((Map<String, Object>) args).get("endRemainFrameNum");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.VAD.VadData ref = (com.iflytek.msc.VAD.VadData) getHEAP().get(refId);
            
                ref.endRemainFrameNum = endRemainFrameNum;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.msc.VAD.VadData::set_waitStart", (args, methodResult) -> {
                // jsonable arg
                int waitStart = (int) ((Map<String, Object>) args).get("waitStart");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.VAD.VadData ref = (com.iflytek.msc.VAD.VadData) getHEAP().get(refId);
            
                ref.waitStart = waitStart;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.msc.VAD.VadData::set_startRemainFrameNum", (args, methodResult) -> {
                // jsonable arg
                int startRemainFrameNum = (int) ((Map<String, Object>) args).get("startRemainFrameNum");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.VAD.VadData ref = (com.iflytek.msc.VAD.VadData) getHEAP().get(refId);
            
                ref.startRemainFrameNum = startRemainFrameNum;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.msc.VAD.VadData::set_wavData", (args, methodResult) -> {
                // jsonable arg
                byte[] wavData = (byte[]) ((Map<String, Object>) args).get("wavData");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.VAD.VadData ref = (com.iflytek.msc.VAD.VadData) getHEAP().get(refId);
            
                ref.wavData = wavData;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.msc.VAD.VadData::set_wavDataSize", (args, methodResult) -> {
                // jsonable arg
                int wavDataSize = (int) ((Map<String, Object>) args).get("wavDataSize");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.VAD.VadData ref = (com.iflytek.msc.VAD.VadData) getHEAP().get(refId);
            
                ref.wavDataSize = wavDataSize;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.msc.VAD.VadData::set_inSpeech", (args, methodResult) -> {
                // jsonable arg
                int inSpeech = (int) ((Map<String, Object>) args).get("inSpeech");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.VAD.VadData ref = (com.iflytek.msc.VAD.VadData) getHEAP().get(refId);
            
                ref.inSpeech = inSpeech;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.msc.VAD.VadData::set_audioQuality", (args, methodResult) -> {
                // jsonable arg
                int audioQuality = (int) ((Map<String, Object>) args).get("audioQuality");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.VAD.VadData ref = (com.iflytek.msc.VAD.VadData) getHEAP().get(refId);
            
                ref.audioQuality = audioQuality;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.msc.VAD.VadData::set_firstOutByte", (args, methodResult) -> {
                // jsonable arg
                int firstOutByte = (int) ((Map<String, Object>) args).get("firstOutByte");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.VAD.VadData ref = (com.iflytek.msc.VAD.VadData) getHEAP().get(refId);
            
                ref.firstOutByte = firstOutByte;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.msc.MSCSessionInfo::set_errorcode", (args, methodResult) -> {
                // jsonable arg
                int errorcode = (int) ((Map<String, Object>) args).get("errorcode");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.MSCSessionInfo ref = (com.iflytek.msc.MSCSessionInfo) getHEAP().get(refId);
            
                ref.errorcode = errorcode;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.msc.MSCSessionInfo::set_epstatues", (args, methodResult) -> {
                // jsonable arg
                int epstatues = (int) ((Map<String, Object>) args).get("epstatues");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.MSCSessionInfo ref = (com.iflytek.msc.MSCSessionInfo) getHEAP().get(refId);
            
                ref.epstatues = epstatues;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.msc.MSCSessionInfo::set_rsltstatus", (args, methodResult) -> {
                // jsonable arg
                int rsltstatus = (int) ((Map<String, Object>) args).get("rsltstatus");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.MSCSessionInfo ref = (com.iflytek.msc.MSCSessionInfo) getHEAP().get(refId);
            
                ref.rsltstatus = rsltstatus;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.msc.MSCSessionInfo::set_sesstatus", (args, methodResult) -> {
                // jsonable arg
                int sesstatus = (int) ((Map<String, Object>) args).get("sesstatus");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.MSCSessionInfo ref = (com.iflytek.msc.MSCSessionInfo) getHEAP().get(refId);
            
                ref.sesstatus = sesstatus;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.msc.MSCSessionInfo::set_buffer", (args, methodResult) -> {
                // jsonable arg
                byte[] buffer = (byte[]) ((Map<String, Object>) args).get("buffer");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.MSCSessionInfo ref = (com.iflytek.msc.MSCSessionInfo) getHEAP().get(refId);
            
                ref.buffer = buffer;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.msc.MSCSessionInfo::set_buflen", (args, methodResult) -> {
                // jsonable arg
                int buflen = (int) ((Map<String, Object>) args).get("buflen");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.MSCSessionInfo ref = (com.iflytek.msc.MSCSessionInfo) getHEAP().get(refId);
            
                ref.buflen = buflen;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.msc.MetaVAD.Instance::set_handle", (args, methodResult) -> {
                // jsonable arg
                long handle = (long) (int) ((Map<String, Object>) args).get("handle");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.MetaVAD.Instance ref = (com.iflytek.msc.MetaVAD.Instance) getHEAP().get(refId);
            
                ref.handle = handle;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.msc.MetaVAD.Instance::set_rate", (args, methodResult) -> {
                // jsonable arg
                int rate = (int) ((Map<String, Object>) args).get("rate");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.MetaVAD.Instance ref = (com.iflytek.msc.MetaVAD.Instance) getHEAP().get(refId);
            
                ref.rate = rate;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.msc.MetaVAD.Instance::set_begin", (args, methodResult) -> {
                // jsonable arg
                int begin = (int) ((Map<String, Object>) args).get("begin");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.MetaVAD.Instance ref = (com.iflytek.msc.MetaVAD.Instance) getHEAP().get(refId);
            
                ref.begin = begin;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.msc.MetaVAD.Instance::set_end", (args, methodResult) -> {
                // jsonable arg
                int end = (int) ((Map<String, Object>) args).get("end");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.MetaVAD.Instance ref = (com.iflytek.msc.MetaVAD.Instance) getHEAP().get(refId);
            
                ref.end = end;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.msc.MetaVAD.Instance::set_seg", (args, methodResult) -> {
                // jsonable arg
                int seg = (int) ((Map<String, Object>) args).get("seg");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.MetaVAD.Instance ref = (com.iflytek.msc.MetaVAD.Instance) getHEAP().get(refId);
            
                ref.seg = seg;
                methodResult.success("success");
            });
            // setter
            put("com.iflytek.msc.MetaVAD.Instance::set_volume", (args, methodResult) -> {
                // jsonable arg
                int volume = (int) ((Map<String, Object>) args).get("volume");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.iflytek.msc.MetaVAD.Instance ref = (com.iflytek.msc.MetaVAD.Instance) getHEAP().get(refId);
            
                ref.volume = volume;
                methodResult.success("success");
            });
            // setter batch
            put("com.iflytek.speech.SpeakerVerifierAidl.PassWord::set_pwdt_batch", (argsBatch, methodResult) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // jsonable arg
                    String pwdt = (String) ((Map<String, Object>) args).get("pwdt");
            
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.SpeakerVerifierAidl.PassWord ref = (com.iflytek.speech.SpeakerVerifierAidl.PassWord) getHEAP().get(refId);
            
                    ref.pwdt = pwdt;
                }
            
                methodResult.success("success");
            });
            // setter batch
            put("com.iflytek.speech.SpeakerVerifierAidl.PassWord::set_pwid_batch", (argsBatch, methodResult) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // jsonable arg
                    String pwid = (String) ((Map<String, Object>) args).get("pwid");
            
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.SpeakerVerifierAidl.PassWord ref = (com.iflytek.speech.SpeakerVerifierAidl.PassWord) getHEAP().get(refId);
            
                    ref.pwid = pwid;
                }
            
                methodResult.success("success");
            });
            // setter batch
            put("com.iflytek.speech.SpeakerVerifierAidl.PassWord::set_pwtext_batch", (argsBatch, methodResult) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // jsonable arg
                    String pwtext = (String) ((Map<String, Object>) args).get("pwtext");
            
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.SpeakerVerifierAidl.PassWord ref = (com.iflytek.speech.SpeakerVerifierAidl.PassWord) getHEAP().get(refId);
            
                    ref.pwtext = pwtext;
                }
            
                methodResult.success("success");
            });
            // setter batch
            put("com.iflytek.speech.VerifierResult::set_sst_batch", (argsBatch, methodResult) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // jsonable arg
                    String sst = (String) ((Map<String, Object>) args).get("sst");
            
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.VerifierResult ref = (com.iflytek.speech.VerifierResult) getHEAP().get(refId);
            
                    ref.sst = sst;
                }
            
                methodResult.success("success");
            });
            // setter batch
            put("com.iflytek.speech.VerifierResult::set_ret_batch", (argsBatch, methodResult) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // jsonable arg
                    boolean ret = (boolean) ((Map<String, Object>) args).get("ret");
            
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.VerifierResult ref = (com.iflytek.speech.VerifierResult) getHEAP().get(refId);
            
                    ref.ret = ret;
                }
            
                methodResult.success("success");
            });
            // setter batch
            put("com.iflytek.speech.VerifierResult::set_dcs_batch", (argsBatch, methodResult) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // jsonable arg
                    String dcs = (String) ((Map<String, Object>) args).get("dcs");
            
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.VerifierResult ref = (com.iflytek.speech.VerifierResult) getHEAP().get(refId);
            
                    ref.dcs = dcs;
                }
            
                methodResult.success("success");
            });
            // setter batch
            put("com.iflytek.speech.VerifierResult::set_vid_batch", (argsBatch, methodResult) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // jsonable arg
                    String vid = (String) ((Map<String, Object>) args).get("vid");
            
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.VerifierResult ref = (com.iflytek.speech.VerifierResult) getHEAP().get(refId);
            
                    ref.vid = vid;
                }
            
                methodResult.success("success");
            });
            // setter batch
            put("com.iflytek.speech.VerifierResult::set_suc_batch", (argsBatch, methodResult) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // jsonable arg
                    int suc = (int) ((Map<String, Object>) args).get("suc");
            
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.VerifierResult ref = (com.iflytek.speech.VerifierResult) getHEAP().get(refId);
            
                    ref.suc = suc;
                }
            
                methodResult.success("success");
            });
            // setter batch
            put("com.iflytek.speech.VerifierResult::set_rgn_batch", (argsBatch, methodResult) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // jsonable arg
                    int rgn = (int) ((Map<String, Object>) args).get("rgn");
            
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.VerifierResult ref = (com.iflytek.speech.VerifierResult) getHEAP().get(refId);
            
                    ref.rgn = rgn;
                }
            
                methodResult.success("success");
            });
            // setter batch
            put("com.iflytek.speech.VerifierResult::set_trs_batch", (argsBatch, methodResult) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // jsonable arg
                    String trs = (String) ((Map<String, Object>) args).get("trs");
            
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.VerifierResult ref = (com.iflytek.speech.VerifierResult) getHEAP().get(refId);
            
                    ref.trs = trs;
                }
            
                methodResult.success("success");
            });
            // setter batch
            put("com.iflytek.speech.VerifierResult::set_source_batch", (argsBatch, methodResult) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // jsonable arg
                    String source = (String) ((Map<String, Object>) args).get("source");
            
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.VerifierResult ref = (com.iflytek.speech.VerifierResult) getHEAP().get(refId);
            
                    ref.source = source;
                }
            
                methodResult.success("success");
            });
            // setter batch
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::set_buffer_batch", (argsBatch, methodResult) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // jsonable arg
                    byte[] buffer = (byte[]) ((Map<String, Object>) args).get("buffer");
            
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get(refId);
            
                    ref.buffer = buffer;
                }
            
                methodResult.success("success");
            });
            // setter batch
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::set_offset_batch", (argsBatch, methodResult) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // jsonable arg
                    int offset = (int) ((Map<String, Object>) args).get("offset");
            
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get(refId);
            
                    ref.offset = offset;
                }
            
                methodResult.success("success");
            });
            // setter batch
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::set_length_batch", (argsBatch, methodResult) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // jsonable arg
                    int length = (int) ((Map<String, Object>) args).get("length");
            
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get(refId);
            
                    ref.length = length;
                }
            
                methodResult.success("success");
            });
            // setter batch
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::set_status_batch", (argsBatch, methodResult) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // jsonable arg
                    int status = (int) ((Map<String, Object>) args).get("status");
            
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get(refId);
            
                    ref.status = status;
                }
            
                methodResult.success("success");
            });
            // setter batch
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::set_sub_batch", (argsBatch, methodResult) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // jsonable arg
                    int sub = (int) ((Map<String, Object>) args).get("sub");
            
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get(refId);
            
                    ref.sub = sub;
                }
            
                methodResult.success("success");
            });
            // setter batch
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::set_volume_batch", (argsBatch, methodResult) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // jsonable arg
                    int volume = (int) ((Map<String, Object>) args).get("volume");
            
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get(refId);
            
                    ref.volume = volume;
                }
            
                methodResult.success("success");
            });
            // setter batch
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::set_voice_batch", (argsBatch, methodResult) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // jsonable arg
                    boolean voice = (boolean) ((Map<String, Object>) args).get("voice");
            
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get(refId);
            
                    ref.voice = voice;
                }
            
                methodResult.success("success");
            });
            // setter batch
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::set_quality_batch", (argsBatch, methodResult) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // jsonable arg
                    int quality = (int) ((Map<String, Object>) args).get("quality");
            
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get(refId);
            
                    ref.quality = quality;
                }
            
                methodResult.success("success");
            });
            // setter batch
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::set_start_batch", (argsBatch, methodResult) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // jsonable arg
                    int start = (int) ((Map<String, Object>) args).get("start");
            
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get(refId);
            
                    ref.start = start;
                }
            
                methodResult.success("success");
            });
            // setter batch
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::set_end_batch", (argsBatch, methodResult) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // jsonable arg
                    int end = (int) ((Map<String, Object>) args).get("end");
            
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get(refId);
            
                    ref.end = end;
                }
            
                methodResult.success("success");
            });
            // setter batch
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::set_error_batch", (argsBatch, methodResult) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // jsonable arg
                    int error = (int) ((Map<String, Object>) args).get("error");
            
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get(refId);
            
                    ref.error = error;
                }
            
                methodResult.success("success");
            });
            // setter batch
            put("com.iflytek.cloud.util.AudioDetector.DetectorResult::set_confidence_batch", (argsBatch, methodResult) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // jsonable arg
                    Double confidence = (Double) ((Map<String, Object>) args).get("confidence");
            
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.util.AudioDetector.DetectorResult ref = (com.iflytek.cloud.util.AudioDetector.DetectorResult) getHEAP().get(refId);
            
                    ref.confidence = new Double(confidence).floatValue();
                }
            
                methodResult.success("success");
            });
        }};
    }
}
